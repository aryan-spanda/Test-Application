name: Build and Deploy with GitOps

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONFIG_REPO: aryan-spanda/config-repo
  TARGET_BRANCH: main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      short-sha: ${{ steps.vars.outputs.short-sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up variables
      id: vars
      run: |
        echo "short-sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=main-${{ steps.vars.outputs.short-sha }}
          type=raw,value=latest
          type=sha,prefix=main-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  update-gitops-config:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout config repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CONFIG_REPO }}
        token: ${{ secrets.GITOPS_PAT }}
        ref: ${{ env.TARGET_BRANCH }}

    - name: Update image tags in config repository
      run: |
        NEW_TAG="main-${{ needs.build-and-push.outputs.short-sha }}"
        
        # Update production values
        if [ -f "apps/test-application/values-prod.yaml" ]; then
          sed -i "s|tag: \".*\"|tag: \"${NEW_TAG}\"|g" apps/test-application/values-prod.yaml
          echo "Updated apps/test-application/values-prod.yaml with tag: ${NEW_TAG}"
        fi
        
        # Update staging values if exists
        if [ -f "apps/test-application/values-staging.yaml" ]; then
          sed -i "s|tag: \".*\"|tag: \"${NEW_TAG}\"|g" apps/test-application/values-staging.yaml
          echo "Updated apps/test-application/values-staging.yaml with tag: ${NEW_TAG}"
        fi
        
        # Update ArgoCD Application if it exists in landing-zone
        if [ -f "landing-zone/applications/test-application.yaml" ]; then
          # Update any Helm values that might reference the image tag
          echo "Found ArgoCD application configuration"
        fi
        
        # Show what changed
        git diff

    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        NEW_TAG="main-${{ needs.build-and-push.outputs.short-sha }}"
        git add .
        git commit -m "üöÄ Update test-application image to ${NEW_TAG}

        Auto-updated from: ${{ github.repository }}@${{ github.sha }}
        
        Changes:
        - Updated image tag to: ${NEW_TAG}
        - Triggered by: ${{ github.event.head_commit.message }}
        "
        
        git push origin ${{ env.TARGET_BRANCH }}

  notify-deployment:
    needs: [build-and-push, update-gitops-config]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.update-gitops-config.result }}" == "success" ]; then
          echo "‚úÖ Successfully updated GitOps configuration!"
          echo "üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ needs.build-and-push.outputs.short-sha }}"
          echo "üì¶ ArgoCD will automatically sync the new deployment"
        else
          echo "‚ùå Failed to update GitOps configuration"
          exit 1
        fi
