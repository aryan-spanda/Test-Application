name: Build and Deploy with GitOps

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

permissions:
  contents: write
  packages: write

env:
  # Using Docker Hub as established
  REGISTRY: docker.io
  IMAGE_NAME: aryanpola/sample-application
  # Your configuration repository
  CONFIG_REPO: aryan-spanda/Spanda-config
  TARGET_BRANCH: main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.vars.outputs.short-sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up variables
      id: vars
      run: |
        echo "short-sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short-sha }},${{ env.IMAGE_NAME }}:latest

  update-gitops-config:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout config repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CONFIG_REPO }}
        token: ${{ secrets.GITOPS_PAT }}
        ref: ${{ env.TARGET_BRANCH }}

    - name: Update Kustomize image tag
      run: |
        NEW_TAG="${{ needs.build-and-push.outputs.short-sha }}"
        TARGET_FILE="apps/sample-app-prod/overlays/production/kustomization.yaml"
        
        if [ -f "$TARGET_FILE" ]; then
          sed -i "s|newTag: .*|newTag: ${NEW_TAG}|g" "$TARGET_FILE"
          echo "Updated $TARGET_FILE with tag: ${NEW_TAG}"
        else
          echo "Error: $TARGET_FILE not found!"
          exit 1
        fi
        
        # Show what changed
        git diff

    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        NEW_TAG="${{ needs.build-and-push.outputs.short-sha }}"
        git add .
        git commit -m "üöÄ Update sample-app image to ${NEW_TAG}"
        git push origin ${{ env.TARGET_BRANCH }}

  notify-deployment:
    needs: [build-and-push, update-gitops-config]
    runs-on: ubuntu-latest
    if: always() # This job runs even if previous jobs fail, to report status
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.update-gitops-config.result }}" == "success" ]; then
          echo "‚úÖ Successfully updated GitOps configuration!"
          echo "üê≥ Image: ${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.short-sha }}"
          echo "üì¶ ArgoCD will now sync the new deployment."
        else
          echo "‚ùå Failed to update GitOps configuration. Please check logs."
          exit 1
        fi
