# Universal CI/CD Workflow Template for Microservices
# This template dynamically builds all microservices found in src/ directory
# Works for applications with any number of microservices (2, 3, 4, etc.)

name: Build and Deploy Microservices

on:
  push:
    branches: [ main, develop, testing ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: aryanpola/sample-application

jobs:
  # Job 1: Discover microservices dynamically
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.find-services.outputs.services }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Find microservices
      id: find-services
      run: |
        # Find all directories in src/ that contain a Dockerfile
        services=$(find src/ -name "Dockerfile" -exec dirname {} \; | sed 's|src/||' | jq -R -s -c 'split("\n")[:-1]')
        echo "services=$services" >> $GITHUB_OUTPUT
        echo "Found services: $services"

  # Job 2: Build all discovered microservices
  build:
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover.outputs.services) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # Build and push each microservice
    - name: Build and push ${{ matrix.service }} image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/${{ matrix.service }}/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.service }}-${{ github.sha }}
        cache-from: type=gha,scope=${{ matrix.service }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service }}

  # Job 3: Update deployment manifests (optional)
  deploy:
    needs: [discover, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/testing' || github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update deployment manifests
      run: |
        echo "Built images for services: ${{ needs.discover.outputs.services }}"
        # Example: Update Helm values or trigger ArgoCD
        for service in $(echo '${{ needs.discover.outputs.services }}' | jq -r '.[]'); do
          echo "Service: $service"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${service}-${{ github.sha }}"
          
          # Add your deployment logic here:
          # - Update Helm values files
          # - Trigger ArgoCD sync
          # - Update Kubernetes manifests
          # - Send webhook to deployment system
        done
        
# ============================================================================
# Templates for Other CI/CD Platforms
# ============================================================================

# GitLab CI (.gitlab-ci.yml) - Dynamic microservices build:
# 
# stages:
#   - discover
#   - build
#   - deploy
# 
# discover-services:
#   stage: discover
#   script:
#     - services=$(find src/ -name "Dockerfile" -exec dirname {} \; | sed 's|src/||')
#     - echo "$services" | tee services.txt
#   artifacts:
#     paths:
#       - services.txt
# 
# build-microservices:
#   stage: build
#   parallel:
#     matrix:
#       - SERVICE: [frontend, backend, api, worker]  # or read from services.txt
#   script:
#     - docker build -f src/$SERVICE/Dockerfile -t $CI_REGISTRY_IMAGE:$SERVICE-$CI_COMMIT_SHA .
#     - docker push $CI_REGISTRY_IMAGE:$SERVICE-$CI_COMMIT_SHA
#   rules:
#     - if: -f "src/$SERVICE/Dockerfile"

# Jenkins Pipeline (Jenkinsfile) - Dynamic microservices build:
#
# pipeline {
#     agent any
#     stages {
#         stage('Discover Services') {
#             steps {
#                 script {
#                     def services = sh(
#                         script: "find src/ -name 'Dockerfile' -exec dirname {} \\; | sed 's|src/||'",
#                         returnStdout: true
#                     ).trim().split('\n')
#                     env.SERVICES = services.join(',')
#                     echo "Found services: ${env.SERVICES}"
#                 }
#             }
#         }
#         stage('Build Services') {
#             steps {
#                 script {
#                     def services = env.SERVICES.split(',')
#                     def builds = [:]
#                     
#                     services.each { service ->
#                         builds[service] = {
#                             node {
#                                 def image = docker.build("aryanpola/sample-application:${service}-${env.BUILD_ID}", "-f src/${service}/Dockerfile .")
#                                 docker.withRegistry('https://docker.io', 'docker-hub-credentials') {
#                                     image.push("${service}-${env.BUILD_ID}")
#                                     image.push("${service}-latest")
#                                 }
#                             }
#                         }
#                     }
#                     parallel builds
#                 }
#             }
#         }
#     }
# }

# Azure DevOps Pipeline (azure-pipelines.yml) - Dynamic microservices:
#
# trigger:
# - main
# - develop
# 
# pool:
#   vmImage: 'ubuntu-latest'
# 
# stages:
# - stage: Discover
#   jobs:
#   - job: FindServices
#     steps:
#     - script: |
#         services=$(find src/ -name "Dockerfile" -exec dirname {} \; | sed 's|src/||' | tr '\n' ',' | sed 's/,$//')
#         echo "##vso[task.setvariable variable=services;isOutput=true]$services"
#       name: discover
# 
# - stage: Build
#   dependsOn: Discover
#   variables:
#     services: $[ stageDependencies.Discover.FindServices.outputs['discover.services'] ]
#   jobs:
#   - job: BuildImages
#     strategy:
#       matrix:
#         ${{ each service in split(variables.services, ',') }}:
#           ${{ service }}:
#             serviceName: ${{ service }}
#     steps:
#     - task: Docker@2
#       inputs:
#         command: 'buildAndPush'
#         repository: 'aryanpola/sample-application'
#         dockerfile: 'src/$(serviceName)/Dockerfile'
#         tags: |
#           $(serviceName)-$(Build.BuildId)
#           $(serviceName)-latest
        
# For other CI/CD platforms:
# 
# GitLab CI (.gitlab-ci.yml):
# 
# stages:
#   - build
#   - deploy
# 
# build-frontend:
#   stage: build
#   script:
#     - docker build -f src/frontend/Dockerfile -t $CI_REGISTRY_IMAGE:frontend-$CI_COMMIT_SHA .
#     - docker push $CI_REGISTRY_IMAGE:frontend-$CI_COMMIT_SHA
# 
# build-backend:
#   stage: build  
#   script:
#     - docker build -f src/backend/Dockerfile -t $CI_REGISTRY_IMAGE:backend-$CI_COMMIT_SHA .
#     - docker push $CI_REGISTRY_IMAGE:backend-$CI_COMMIT_SHA
#
# Jenkins Pipeline (Jenkinsfile):
#
# pipeline {
#     agent any
#     stages {
#         stage('Build Frontend') {
#             steps {
#                 script {
#                     docker.build("aryanpola/sample-application:frontend-${env.BUILD_ID}", "-f src/frontend/Dockerfile .")
#                     docker.withRegistry('https://docker.io', 'docker-hub-credentials') {
#                         docker.image("aryanpola/sample-application:frontend-${env.BUILD_ID}").push()
#                     }
#                 }
#             }
#         }
#         stage('Build Backend') {
#             steps {
#                 script {
#                     docker.build("aryanpola/sample-application:backend-${env.BUILD_ID}", "-f src/backend/Dockerfile .")
#                     docker.withRegistry('https://docker.io', 'docker-hub-credentials') {
#                         docker.image("aryanpola/sample-application:backend-${env.BUILD_ID}").push()
#                     }
#                 }
#             }
#         }
#     }
# }
