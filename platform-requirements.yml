# =====================================================================
# Platform Requirements for CI/CD Onboarding and Infrastructure
# =====================================================================
# This file declares the application's infrastructure needs, target
# environments, and Helm chart location. It is used by the automated
# onboarding script to generate ArgoCD deployment manifests.
# =====================================================================

# Section 1: Application Identity
# NEED TO SPECIFY A PRODUCTION/DEVELOPMENT BRANCH HERE
# ---------------------------------------------------------------------
app:
  name: "test-application"
  repoURL: "https://github.com/aryan-spanda/Test-Application.git"
  chartPath: "deploy/helm"
  type: "fullstack"
  team: "development-team"
  # TENANT CONFIGURATION - REQUIRED FOR MULTI-TENANT DEPLOYMENTS
  tenant: "test-application-2"  # Maps to ArgoCD project and tenant namespaces

# Section 1.1: Microservices Configuration (Auto-Discovery)
# ---------------------------------------------------------------------
# The platform will automatically discover microservices by scanning src/ directory
# for subdirectories containing Dockerfiles. You can override this behavior by 
# explicitly defining microservices below:
# 
# microservices:
#   - name: "frontend"
#     dockerfile: "src/frontend/Dockerfile"
#     port: 3000
#   - name: "backend"  
#     dockerfile: "src/backend/Dockerfile"
#     port: 8080
#   - name: "api"
#     dockerfile: "src/api/Dockerfile" 
#     port: 9000
#   - name: "worker"
#     dockerfile: "src/worker/Dockerfile"
#
# If not specified, auto-discovery will find all src/*/Dockerfile patterns
# Auto-discovery is recommended for most use cases
  
# Section 1.1: Container Registry Configuration
# ---------------------------------------------------------------------
container:
  registry: "docker.io"
  organization: "aryanpola"
  image: "sample-application"

# Section 2.1: Target Environments
# ---------------------------------------------------------------------
environments:
  - dev
  - staging
  - production

# Section 2.2: GitOps Configuration
# ---------------------------------------------------------------------
gitops:
  targetBranch: "testing"
  tagPattern: "^testing-[0-9a-f]{7,8}$"
  updateStrategy: "newest-build"

# Section 2.3: CI/CD Configuration
# ---------------------------------------------------------------------
cicd:
  # Docker registry configuration
  registry_host: "docker.io"                    # Docker registry URL
  image_namespace: "aryanpola/sample-application"  # Full repository name for images
  
  # Source code configuration  
  source_directory: "src/"                       # Where to find services (default: src/)
  
  # Deployment configuration
  deployment_branches:                           # Which branches trigger deployment
    - "main"
    - "testing" 
    - "staging"
  
  # Registry authentication (reference to secrets)
  registry_credentials:
    username_secret: "DOCKERHUB_USERNAME"        # GitHub secret name for registry username
    password_secret: "DOCKERHUB_TOKEN"           # GitHub secret name for registry password
  
  # Image tagging strategy
  tagging_strategy:
    type: "sha-based"                            # Options: sha-based, semantic, date-based
    format: "{service}-{sha}"                    # Tag format template
    include_latest: false                        # Whether to also tag as 'latest'
  
  # Environment mapping (branch to environment)
  environment_mapping:
    main: "production"
    testing: "staging" 
    develop: "dev"

# Section 3: Platform Module Requirements
# ---------------------------------------------------------------------
platform:
  modules:
    # --- Available Networking Modules ---
    address_management: true          # MetalLB and External-DNS address management
    vpc_networking: true              # Virtual private cloud networking
    external_load_balancer: true      # Public internet access load balancer
    internal_load_balancer: true      # Internal service communication load balancer
    firewall: true                    # Security rules and network policies

    # --- Modules Not Yet Available (set to false) ---
    ssl_termination: false            # HTTPS support (module removed)
    logging: false                    # Centralized logging (module removed)
    monitoring: false                 # Observability stack (module removed)
    metrics: false                    # Application metrics (module removed)
    secrets_management: false         # Secret store integration (module removed)
    cdn: false                        # Content Delivery Network (module removed)
    waf: false                        # Web Application Firewall (module removed)
    service_mesh: false               # Advanced networking (module removed)
    backup: false                     # Automated backups (module removed)
    disaster_recovery: false          # Multi-region failover (module removed)

# Section 4: Tenant-Specific Platform Modules  
# ---------------------------------------------------------------------
# Define specific platform modules required for this tenant
modules:
  - name: "traditional-bi-baremetal"
    version: "1.0.0"
    description: "Traditional BI stack (PostgreSQL, MySQL, Superset)"
    values:
      # Custom configuration for this tenant
      superset:
        admin_user: "test-app-admin"
        custom_config: "test-application-specific"
  
  - name: "realtime-bi-baremetal"
    version: "1.0.0"
    description: "Real-time BI stack (ClickHouse, Real-time Superset)"
    values:
      # Real-time analytics configuration
      clickhouse:
        cluster_name: "test-app-realtime"
        tenant_specific: true
      superset:
        realtime_dashboards: true
        
  - name: "data-lake-baremetal"
    version: "1.0.0"
    description: "Complete data lake platform (MinIO, Kafka, Spark, NiFi)"
    values:
      # Data lake configuration
      minio:
        tenant_bucket: "test-application-2-data"
        access_mode: "tenant-isolated"
      kafka:
        topics_prefix: "test-app-2"
      spark:
        driver_memory: "2g"
        executor_memory: "4g"
      nifi:
        flow_templates: "basic-etl"
        
  - name: "security-vault" 
    version: "1.2.0"
    description: "HashiCorp Vault secret management"
    values:
      # Tenant-specific Vault configuration
      vault:
        ui_enabled: true
        tenant_specific_policies: true
        
  - name: "monitoring-prometheus"
    version: "1.1.0" 
    description: "Prometheus monitoring stack with Grafana"
    values:
      # Custom monitoring configuration
      prometheus:
        retention: "30d"
        tenant_dashboards: true
      grafana:
        custom_dashboards:
          - "test-application-metrics"
          - "test-application-business-kpis"
          - "data-lake-monitoring"
          - "realtime-bi-metrics"

# =====================================================================
# NOTE: Application runtime configuration (replicas, image tags, CPU,
# memory, environment variables, etc.) is managed in the Helm chart's
# values files at deploy/helm/, NOT here.
# =====================================================================

# =====================================================================
# ENVIRONMENT RESOURCE ALLOCATION (PLATFORM MANAGED - DO NOT EDIT)
# =====================================================================
# The following resource allocations are managed by the platform team
# and cannot be modified by application developers. These are provided
# for informational purposes only.

# STAGING Environment Resources:
# frontend:
#   replicas: 1 (fixed)
#   resources:
#     cpu: "100m" (platform managed)
#     memory: "128Mi" (platform managed)
# backend:
#   replicas: 1 (fixed)
#   resources:
#     cpu: "200m" (platform managed)
#     memory: "256Mi" (platform managed)
# modules:
#   cdn: false (disabled in staging)
#   waf: false (disabled in staging)
#   backup: false (disabled in staging)
#   disaster_recovery: false (disabled in staging)

# PRODUCTION Environment Resources:
# frontend:
#   replicas: 3 (fixed)
#   resources:
#     cpu: "500m" (platform managed)
#     memory: "512Mi" (platform managed)
# backend:
#   replicas: 3 (fixed)
#   resources:
#     cpu: "1000m" (platform managed)
#     memory: "1Gi" (platform managed)
# modules:
#   waf: true (automatically enabled in production)
#   backup: true (automatically enabled in production)
#   monitoring: true (automatically enabled in production)
#   compliance_scanning: true (automatically enabled in production)

# =====================================================================
# RESOURCE SCALING REQUESTS
# =====================================================================
# If your application requires different resource allocations than the
# standard platform defaults shown above, please contact the platform
# team with:
# 1. Business justification for resource changes
# 2. Performance testing data supporting the request
# 3. Expected traffic/load patterns
# 
# Standard resource tiers available:
# - Small:  frontend(100m/128Mi), backend(200m/256Mi) - 1 replica
# - Medium: frontend(500m/512Mi), backend(1000m/1Gi) - 3 replicas  
# - Large:  Contact platform team for custom sizing
# =====================================================================
