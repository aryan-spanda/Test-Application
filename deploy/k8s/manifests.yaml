apiVersion: v1
kind: Namespace
metadata:
  name: test-app
  labels:
    app.kubernetes.io/name: test-application
    app.kubernetes.io/instance: test-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-application
  namespace: test-app
  labels:
    app.kubernetes.io/name: test-application
    app.kubernetes.io/instance: test-app
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: test-application
      app.kubernetes.io/instance: test-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: test-application
        app.kubernetes.io/instance: test-app
        app.kubernetes.io/version: "1.0.0"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: test-application
        image: ghcr.io/aryan-spanda/test-application:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: LOG_LEVEL
          value: "info"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
---
apiVersion: v1
kind: Service
metadata:
  name: test-application-service
  namespace: test-app
  labels:
    app.kubernetes.io/name: test-application
    app.kubernetes.io/instance: test-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: test-application
    app.kubernetes.io/instance: test-app
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-application-ingress
  namespace: test-app
  labels:
    app.kubernetes.io/name: test-application
    app.kubernetes.io/instance: test-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - test-app.spanda.local
    secretName: test-app-tls
  rules:
  - host: test-app.spanda.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: test-application-service
            port:
              number: 80
